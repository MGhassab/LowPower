// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel_filter,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s100-fgga676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.906750,HLS_SYN_LAT=1821721,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=188,HLS_SYN_LUT=651,HLS_VERSION=2019_1}" *)

module sobel_filter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_address1,
        in_r_ce1,
        in_r_q1,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [17:0] in_r_address0;
output   in_r_ce0;
input  [7:0] in_r_q0;
output  [17:0] in_r_address1;
output   in_r_ce1;
input  [7:0] in_r_q1;
output  [17:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [7:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[17:0] in_r_address0;
reg in_r_ce0;
reg[17:0] in_r_address1;
reg in_r_ce1;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_158;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [7:0] reg_163;
wire    ap_CS_fsm_state6;
wire   [17:0] shl_ln8_fu_174_p3;
reg   [17:0] shl_ln8_reg_589;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln6_fu_168_p2;
wire   [18:0] zext_ln8_fu_188_p1;
reg   [18:0] zext_ln8_reg_598;
wire   [18:0] zext_ln8_1_fu_198_p1;
reg   [18:0] zext_ln8_1_reg_603;
wire   [9:0] zext_ln7_fu_202_p1;
reg   [9:0] zext_ln7_reg_608;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln7_fu_214_p2;
wire   [18:0] add_ln8_4_fu_259_p2;
reg   [18:0] add_ln8_4_reg_626;
wire   [18:0] add_ln8_7_fu_264_p2;
reg   [18:0] add_ln8_7_reg_631;
wire   [8:0] i_fu_269_p2;
wire  signed [9:0] add_ln8_5_fu_279_p2;
reg  signed [9:0] add_ln8_5_reg_646;
wire   [9:0] add_ln8_10_fu_345_p2;
reg   [9:0] add_ln8_10_reg_666;
wire   [8:0] sub_ln9_fu_351_p2;
reg   [8:0] sub_ln9_reg_671;
reg   [7:0] in_load_5_reg_676;
reg   [7:0] in_load_6_reg_693;
wire    ap_CS_fsm_state7;
reg   [7:0] in_load_7_reg_698;
wire   [9:0] sub_ln9_1_fu_409_p2;
reg   [9:0] sub_ln9_1_reg_703;
wire   [7:0] add_ln12_fu_561_p2;
reg   [7:0] add_ln12_reg_708;
wire    ap_CS_fsm_state8;
wire   [8:0] j_fu_580_p2;
wire    ap_CS_fsm_state9;
reg   [8:0] i_0_reg_134;
reg   [8:0] j_0_reg_146;
wire   [63:0] zext_ln8_2_fu_235_p1;
wire   [63:0] zext_ln8_4_fu_254_p1;
wire   [63:0] zext_ln8_6_fu_275_p1;
wire   [63:0] zext_ln8_8_fu_293_p1;
wire   [63:0] zext_ln8_10_fu_318_p1;
wire   [63:0] zext_ln8_11_fu_330_p1;
wire   [63:0] zext_ln9_fu_374_p1;
wire   [63:0] zext_ln9_3_fu_388_p1;
wire   [63:0] zext_ln12_fu_575_p1;
wire   [17:0] or_ln8_fu_182_p2;
wire   [17:0] or_ln8_1_fu_192_p2;
wire   [10:0] zext_ln7_2_fu_210_p1;
wire   [10:0] add_ln8_fu_220_p2;
wire  signed [17:0] sext_ln8_fu_226_p1;
wire   [17:0] add_ln8_1_fu_230_p2;
wire   [8:0] add_ln8_2_fu_240_p2;
wire   [17:0] add_ln8_3_fu_246_p3;
wire   [18:0] zext_ln7_1_fu_206_p1;
wire  signed [17:0] sext_ln8_1_fu_284_p1;
wire   [17:0] add_ln8_6_fu_288_p2;
wire   [8:0] shl_ln8_1_fu_302_p3;
wire   [17:0] zext_ln8_14_fu_322_p1;
wire   [17:0] add_ln8_8_fu_325_p2;
wire   [8:0] zext_ln8_3_fu_298_p1;
wire   [8:0] zext_ln8_7_fu_314_p1;
wire   [8:0] add_ln8_9_fu_335_p2;
wire   [9:0] zext_ln8_17_fu_341_p1;
wire   [9:0] zext_ln8_5_fu_310_p1;
wire  signed [9:0] or_ln9_fu_357_p3;
wire  signed [17:0] sext_ln9_fu_365_p1;
wire   [17:0] add_ln9_fu_369_p2;
wire   [17:0] zext_ln9_2_fu_379_p1;
wire   [17:0] add_ln9_1_fu_383_p2;
wire  signed [9:0] sext_ln9_1_fu_400_p1;
wire   [9:0] zext_ln8_9_fu_393_p1;
wire   [9:0] add_ln9_2_fu_403_p2;
wire   [9:0] zext_ln8_16_fu_397_p1;
wire   [8:0] shl_ln8_2_fu_419_p3;
wire   [10:0] zext_ln8_12_fu_415_p1;
wire   [10:0] zext_ln8_18_fu_434_p1;
wire   [10:0] sub_ln8_fu_437_p2;
wire   [10:0] zext_ln8_15_fu_431_p1;
wire   [10:0] add_ln8_11_fu_453_p2;
wire   [10:0] zext_ln8_13_fu_427_p1;
wire   [8:0] shl_ln9_1_fu_465_p3;
wire   [8:0] shl_ln9_fu_476_p3;
wire   [10:0] zext_ln9_1_fu_472_p1;
wire  signed [10:0] sext_ln9_2_fu_487_p1;
wire   [10:0] add_ln9_3_fu_490_p2;
wire   [10:0] zext_ln9_4_fu_483_p1;
wire   [10:0] gx_sum_fu_459_p2;
wire   [7:0] trunc_ln8_fu_449_p1;
wire   [7:0] shl_ln8_3_fu_443_p2;
wire   [7:0] add_ln10_1_fu_510_p2;
wire   [7:0] add_ln10_fu_516_p2;
wire   [0:0] tmp_fu_502_p3;
wire   [7:0] sub_ln10_fu_521_p2;
wire   [10:0] gy_sum_fu_496_p2;
wire   [7:0] trunc_ln11_fu_543_p1;
wire   [0:0] tmp_1_fu_535_p3;
wire   [7:0] sub_ln11_fu_547_p2;
wire   [7:0] select_ln11_fu_553_p3;
wire   [7:0] select_ln10_fu_527_p3;
wire   [17:0] add_ln12_1_fu_567_p3;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_134 <= i_fu_269_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_134 <= 9'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_146 <= 9'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_reg_146 <= j_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_158 <= in_r_q1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_158 <= in_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_163 <= in_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_163 <= in_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln12_reg_708 <= add_ln12_fu_561_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln8_10_reg_666 <= add_ln8_10_fu_345_p2;
        sub_ln9_reg_671 <= sub_ln9_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln8_4_reg_626 <= add_ln8_4_fu_259_p2;
        add_ln8_7_reg_631 <= add_ln8_7_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln8_5_reg_646 <= add_ln8_5_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_load_5_reg_676 <= in_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_load_6_reg_693 <= in_r_q0;
        in_load_7_reg_698 <= in_r_q1;
        sub_ln9_1_reg_703 <= sub_ln9_1_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln8_reg_589[17 : 9] <= shl_ln8_fu_174_p3[17 : 9];
        zext_ln8_1_reg_603[17 : 9] <= zext_ln8_1_fu_198_p1[17 : 9];
        zext_ln8_reg_598[17 : 9] <= zext_ln8_fu_188_p1[17 : 9];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln7_reg_608[8 : 0] <= zext_ln7_fu_202_p1[8 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_r_address0 = zext_ln9_fu_374_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        in_r_address0 = zext_ln8_10_fu_318_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_address0 = zext_ln8_6_fu_275_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_address0 = zext_ln8_2_fu_235_p1;
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_r_address1 = zext_ln9_3_fu_388_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        in_r_address1 = zext_ln8_11_fu_330_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_address1 = zext_ln8_8_fu_293_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_address1 = zext_ln8_4_fu_254_p1;
    end else begin
        in_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        in_r_ce1 = 1'b1;
    end else begin
        in_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln7_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_1_fu_510_p2 = (trunc_ln8_fu_449_p1 + shl_ln8_3_fu_443_p2);

assign add_ln10_fu_516_p2 = (add_ln10_1_fu_510_p2 + in_load_5_reg_676);

assign add_ln12_1_fu_567_p3 = {{i_0_reg_134}, {j_0_reg_146}};

assign add_ln12_fu_561_p2 = (select_ln11_fu_553_p3 + select_ln10_fu_527_p3);

assign add_ln8_10_fu_345_p2 = (zext_ln8_17_fu_341_p1 + zext_ln8_5_fu_310_p1);

assign add_ln8_11_fu_453_p2 = (sub_ln8_fu_437_p2 + zext_ln8_15_fu_431_p1);

assign add_ln8_1_fu_230_p2 = ($signed(sext_ln8_fu_226_p1) + $signed(shl_ln8_reg_589));

assign add_ln8_2_fu_240_p2 = ($signed(9'd511) + $signed(j_0_reg_146));

assign add_ln8_3_fu_246_p3 = {{i_0_reg_134}, {add_ln8_2_fu_240_p2}};

assign add_ln8_4_fu_259_p2 = (zext_ln8_reg_598 + zext_ln7_1_fu_206_p1);

assign add_ln8_5_fu_279_p2 = ($signed(10'd513) + $signed(zext_ln7_reg_608));

assign add_ln8_6_fu_288_p2 = ($signed(sext_ln8_1_fu_284_p1) + $signed(shl_ln8_reg_589));

assign add_ln8_7_fu_264_p2 = (zext_ln8_1_reg_603 + zext_ln7_1_fu_206_p1);

assign add_ln8_8_fu_325_p2 = (zext_ln8_14_fu_322_p1 + shl_ln8_reg_589);

assign add_ln8_9_fu_335_p2 = (zext_ln8_3_fu_298_p1 + zext_ln8_7_fu_314_p1);

assign add_ln8_fu_220_p2 = ($signed(11'd1535) + $signed(zext_ln7_2_fu_210_p1));

assign add_ln9_1_fu_383_p2 = (zext_ln9_2_fu_379_p1 + shl_ln8_reg_589);

assign add_ln9_2_fu_403_p2 = ($signed(sext_ln9_1_fu_400_p1) + $signed(zext_ln8_9_fu_393_p1));

assign add_ln9_3_fu_490_p2 = ($signed(zext_ln9_1_fu_472_p1) + $signed(sext_ln9_2_fu_487_p1));

assign add_ln9_fu_369_p2 = ($signed(sext_ln9_fu_365_p1) + $signed(shl_ln8_reg_589));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign gx_sum_fu_459_p2 = (add_ln8_11_fu_453_p2 + zext_ln8_13_fu_427_p1);

assign gy_sum_fu_496_p2 = (add_ln9_3_fu_490_p2 - zext_ln9_4_fu_483_p1);

assign i_fu_269_p2 = (i_0_reg_134 + 9'd1);

assign icmp_ln6_fu_168_p2 = ((i_0_reg_134 == 9'd511) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_214_p2 = ((j_0_reg_146 == 9'd511) ? 1'b1 : 1'b0);

assign j_fu_580_p2 = (9'd1 + j_0_reg_146);

assign or_ln8_1_fu_192_p2 = (shl_ln8_fu_174_p3 | 18'd1);

assign or_ln8_fu_182_p2 = (shl_ln8_fu_174_p3 | 18'd511);

assign or_ln9_fu_357_p3 = {{1'd1}, {j_0_reg_146}};

assign out_r_address0 = zext_ln12_fu_575_p1;

assign out_r_d0 = add_ln12_reg_708;

assign select_ln10_fu_527_p3 = ((tmp_fu_502_p3[0:0] === 1'b1) ? sub_ln10_fu_521_p2 : add_ln10_fu_516_p2);

assign select_ln11_fu_553_p3 = ((tmp_1_fu_535_p3[0:0] === 1'b1) ? sub_ln11_fu_547_p2 : trunc_ln11_fu_543_p1);

assign sext_ln8_1_fu_284_p1 = add_ln8_5_fu_279_p2;

assign sext_ln8_fu_226_p1 = $signed(add_ln8_fu_220_p2);

assign sext_ln9_1_fu_400_p1 = $signed(sub_ln9_reg_671);

assign sext_ln9_2_fu_487_p1 = $signed(sub_ln9_1_reg_703);

assign sext_ln9_fu_365_p1 = or_ln9_fu_357_p3;

assign shl_ln8_1_fu_302_p3 = {{reg_163}, {1'd0}};

assign shl_ln8_2_fu_419_p3 = {{reg_163}, {1'd0}};

assign shl_ln8_3_fu_443_p2 = reg_163 << 8'd1;

assign shl_ln8_fu_174_p3 = {{i_0_reg_134}, {9'd0}};

assign shl_ln9_1_fu_465_p3 = {{in_load_6_reg_693}, {1'd0}};

assign shl_ln9_fu_476_p3 = {{in_load_7_reg_698}, {1'd0}};

assign sub_ln10_fu_521_p2 = (8'd0 - add_ln10_fu_516_p2);

assign sub_ln11_fu_547_p2 = (8'd0 - trunc_ln11_fu_543_p1);

assign sub_ln8_fu_437_p2 = (zext_ln8_12_fu_415_p1 - zext_ln8_18_fu_434_p1);

assign sub_ln9_1_fu_409_p2 = (add_ln9_2_fu_403_p2 - zext_ln8_16_fu_397_p1);

assign sub_ln9_fu_351_p2 = (zext_ln8_3_fu_298_p1 - zext_ln8_7_fu_314_p1);

assign tmp_1_fu_535_p3 = gy_sum_fu_496_p2[32'd10];

assign tmp_fu_502_p3 = gx_sum_fu_459_p2[32'd10];

assign trunc_ln11_fu_543_p1 = gy_sum_fu_496_p2[7:0];

assign trunc_ln8_fu_449_p1 = sub_ln8_fu_437_p2[7:0];

assign zext_ln12_fu_575_p1 = add_ln12_1_fu_567_p3;

assign zext_ln7_1_fu_206_p1 = j_0_reg_146;

assign zext_ln7_2_fu_210_p1 = j_0_reg_146;

assign zext_ln7_fu_202_p1 = j_0_reg_146;

assign zext_ln8_10_fu_318_p1 = add_ln8_7_reg_631;

assign zext_ln8_11_fu_330_p1 = add_ln8_8_fu_325_p2;

assign zext_ln8_12_fu_415_p1 = reg_158;

assign zext_ln8_13_fu_427_p1 = shl_ln8_2_fu_419_p3;

assign zext_ln8_14_fu_322_p1 = $unsigned(add_ln8_5_reg_646);

assign zext_ln8_15_fu_431_p1 = in_load_5_reg_676;

assign zext_ln8_16_fu_397_p1 = in_load_5_reg_676;

assign zext_ln8_17_fu_341_p1 = add_ln8_9_fu_335_p2;

assign zext_ln8_18_fu_434_p1 = add_ln8_10_reg_666;

assign zext_ln8_1_fu_198_p1 = or_ln8_1_fu_192_p2;

assign zext_ln8_2_fu_235_p1 = add_ln8_1_fu_230_p2;

assign zext_ln8_3_fu_298_p1 = reg_158;

assign zext_ln8_4_fu_254_p1 = add_ln8_3_fu_246_p3;

assign zext_ln8_5_fu_310_p1 = shl_ln8_1_fu_302_p3;

assign zext_ln8_6_fu_275_p1 = add_ln8_4_reg_626;

assign zext_ln8_7_fu_314_p1 = in_r_q0;

assign zext_ln8_8_fu_293_p1 = add_ln8_6_fu_288_p2;

assign zext_ln8_9_fu_393_p1 = reg_158;

assign zext_ln8_fu_188_p1 = or_ln8_fu_182_p2;

assign zext_ln9_1_fu_472_p1 = shl_ln9_1_fu_465_p3;

assign zext_ln9_2_fu_379_p1 = $unsigned(or_ln9_fu_357_p3);

assign zext_ln9_3_fu_388_p1 = add_ln9_1_fu_383_p2;

assign zext_ln9_4_fu_483_p1 = shl_ln9_fu_476_p3;

assign zext_ln9_fu_374_p1 = add_ln9_fu_369_p2;

always @ (posedge ap_clk) begin
    shl_ln8_reg_589[8:0] <= 9'b000000000;
    zext_ln8_reg_598[8:0] <= 9'b111111111;
    zext_ln8_reg_598[18] <= 1'b0;
    zext_ln8_1_reg_603[8:0] <= 9'b000000001;
    zext_ln8_1_reg_603[18] <= 1'b0;
    zext_ln7_reg_608[9] <= 1'b0;
end

endmodule //sobel_filter
