-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (17 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sobel_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel_filter,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s100-fgga676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.906750,HLS_SYN_LAT=1821721,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=188,HLS_SYN_LUT=651,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv18_1FF : STD_LOGIC_VECTOR (17 downto 0) := "000000000111111111";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv11_5FF : STD_LOGIC_VECTOR (10 downto 0) := "10111111111";
    constant ap_const_lv10_201 : STD_LOGIC_VECTOR (9 downto 0) := "1000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal reg_163 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal shl_ln8_fu_174_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln8_reg_589 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln6_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln8_fu_188_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln8_reg_598 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln8_1_fu_198_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln8_1_reg_603 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln7_fu_202_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln7_reg_608 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln7_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_4_fu_259_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln8_4_reg_626 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln8_7_fu_264_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln8_7_reg_631 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_fu_269_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln8_5_fu_279_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln8_5_reg_646 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln8_10_fu_345_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln8_10_reg_666 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln9_fu_351_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln9_reg_671 : STD_LOGIC_VECTOR (8 downto 0);
    signal in_load_5_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_load_6_reg_693 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal in_load_7_reg_698 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln9_1_fu_409_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln9_1_reg_703 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln12_fu_561_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln12_reg_708 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_fu_580_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_reg_134 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_0_reg_146 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln8_2_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln8_4_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln8_6_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln8_8_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln8_10_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln8_11_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_3_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln8_fu_182_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln8_1_fu_192_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln7_2_fu_210_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln8_fu_220_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln8_fu_226_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln8_1_fu_230_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln8_2_fu_240_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln8_3_fu_246_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln7_1_fu_206_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln8_1_fu_284_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln8_6_fu_288_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln8_1_fu_302_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln8_14_fu_322_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln8_8_fu_325_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln8_3_fu_298_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln8_7_fu_314_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln8_9_fu_335_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln8_17_fu_341_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln8_5_fu_310_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln9_fu_357_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln9_fu_365_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln9_fu_369_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln9_2_fu_379_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln9_1_fu_383_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln9_1_fu_400_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln8_9_fu_393_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln9_2_fu_403_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln8_16_fu_397_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln8_2_fu_419_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln8_12_fu_415_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln8_18_fu_434_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln8_fu_437_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln8_15_fu_431_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln8_11_fu_453_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln8_13_fu_427_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln9_1_fu_465_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln9_fu_476_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln9_1_fu_472_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln9_2_fu_487_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln9_3_fu_490_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln9_4_fu_483_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal gx_sum_fu_459_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln8_fu_449_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln8_3_fu_443_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln10_1_fu_510_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln10_fu_516_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_502_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln10_fu_521_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal gy_sum_fu_496_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln11_fu_543_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_535_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln11_fu_547_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln11_fu_553_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln10_fu_527_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln12_1_fu_567_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_134 <= i_fu_269_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_134 <= ap_const_lv9_1;
            end if; 
        end if;
    end process;

    j_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_146 <= ap_const_lv9_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_0_reg_146 <= j_fu_580_p2;
            end if; 
        end if;
    end process;

    reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_158 <= in_r_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_158 <= in_r_q0;
            end if; 
        end if;
    end process;

    reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_163 <= in_r_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_163 <= in_r_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln12_reg_708 <= add_ln12_fu_561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln8_10_reg_666 <= add_ln8_10_fu_345_p2;
                sub_ln9_reg_671 <= sub_ln9_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln8_4_reg_626 <= add_ln8_4_fu_259_p2;
                add_ln8_7_reg_631 <= add_ln8_7_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln8_5_reg_646 <= add_ln8_5_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_load_5_reg_676 <= in_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                in_load_6_reg_693 <= in_r_q0;
                in_load_7_reg_698 <= in_r_q1;
                sub_ln9_1_reg_703 <= sub_ln9_1_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln8_reg_589(17 downto 9) <= shl_ln8_fu_174_p3(17 downto 9);
                    zext_ln8_1_reg_603(17 downto 9) <= zext_ln8_1_fu_198_p1(17 downto 9);
                    zext_ln8_reg_598(17 downto 9) <= zext_ln8_fu_188_p1(17 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln7_reg_608(8 downto 0) <= zext_ln7_fu_202_p1(8 downto 0);
            end if;
        end if;
    end process;
    shl_ln8_reg_589(8 downto 0) <= "000000000";
    zext_ln8_reg_598(8 downto 0) <= "111111111";
    zext_ln8_reg_598(18) <= '0';
    zext_ln8_1_reg_603(8 downto 0) <= "000000001";
    zext_ln8_1_reg_603(18) <= '0';
    zext_ln7_reg_608(9) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln6_fu_168_p2, ap_CS_fsm_state3, icmp_ln7_fu_214_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln6_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln7_fu_214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln10_1_fu_510_p2 <= std_logic_vector(unsigned(trunc_ln8_fu_449_p1) + unsigned(shl_ln8_3_fu_443_p2));
    add_ln10_fu_516_p2 <= std_logic_vector(unsigned(add_ln10_1_fu_510_p2) + unsigned(in_load_5_reg_676));
    add_ln12_1_fu_567_p3 <= (i_0_reg_134 & j_0_reg_146);
    add_ln12_fu_561_p2 <= std_logic_vector(unsigned(select_ln11_fu_553_p3) + unsigned(select_ln10_fu_527_p3));
    add_ln8_10_fu_345_p2 <= std_logic_vector(unsigned(zext_ln8_17_fu_341_p1) + unsigned(zext_ln8_5_fu_310_p1));
    add_ln8_11_fu_453_p2 <= std_logic_vector(unsigned(sub_ln8_fu_437_p2) + unsigned(zext_ln8_15_fu_431_p1));
    add_ln8_1_fu_230_p2 <= std_logic_vector(signed(sext_ln8_fu_226_p1) + signed(shl_ln8_reg_589));
    add_ln8_2_fu_240_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(j_0_reg_146));
    add_ln8_3_fu_246_p3 <= (i_0_reg_134 & add_ln8_2_fu_240_p2);
    add_ln8_4_fu_259_p2 <= std_logic_vector(unsigned(zext_ln8_reg_598) + unsigned(zext_ln7_1_fu_206_p1));
    add_ln8_5_fu_279_p2 <= std_logic_vector(signed(ap_const_lv10_201) + signed(zext_ln7_reg_608));
    add_ln8_6_fu_288_p2 <= std_logic_vector(signed(sext_ln8_1_fu_284_p1) + signed(shl_ln8_reg_589));
    add_ln8_7_fu_264_p2 <= std_logic_vector(unsigned(zext_ln8_1_reg_603) + unsigned(zext_ln7_1_fu_206_p1));
    add_ln8_8_fu_325_p2 <= std_logic_vector(unsigned(zext_ln8_14_fu_322_p1) + unsigned(shl_ln8_reg_589));
    add_ln8_9_fu_335_p2 <= std_logic_vector(unsigned(zext_ln8_3_fu_298_p1) + unsigned(zext_ln8_7_fu_314_p1));
    add_ln8_fu_220_p2 <= std_logic_vector(signed(ap_const_lv11_5FF) + signed(zext_ln7_2_fu_210_p1));
    add_ln9_1_fu_383_p2 <= std_logic_vector(unsigned(zext_ln9_2_fu_379_p1) + unsigned(shl_ln8_reg_589));
    add_ln9_2_fu_403_p2 <= std_logic_vector(signed(sext_ln9_1_fu_400_p1) + signed(zext_ln8_9_fu_393_p1));
    add_ln9_3_fu_490_p2 <= std_logic_vector(unsigned(zext_ln9_1_fu_472_p1) + unsigned(sext_ln9_2_fu_487_p1));
    add_ln9_fu_369_p2 <= std_logic_vector(signed(sext_ln9_fu_365_p1) + signed(shl_ln8_reg_589));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln6_fu_168_p2)
    begin
        if (((icmp_ln6_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln6_fu_168_p2)
    begin
        if (((icmp_ln6_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    gx_sum_fu_459_p2 <= std_logic_vector(unsigned(add_ln8_11_fu_453_p2) + unsigned(zext_ln8_13_fu_427_p1));
    gy_sum_fu_496_p2 <= std_logic_vector(unsigned(add_ln9_3_fu_490_p2) - unsigned(zext_ln9_4_fu_483_p1));
    i_fu_269_p2 <= std_logic_vector(unsigned(i_0_reg_134) + unsigned(ap_const_lv9_1));
    icmp_ln6_fu_168_p2 <= "1" when (i_0_reg_134 = ap_const_lv9_1FF) else "0";
    icmp_ln7_fu_214_p2 <= "1" when (j_0_reg_146 = ap_const_lv9_1FF) else "0";

    in_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, zext_ln8_2_fu_235_p1, zext_ln8_6_fu_275_p1, zext_ln8_10_fu_318_p1, zext_ln9_fu_374_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_r_address0 <= zext_ln9_fu_374_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_r_address0 <= zext_ln8_10_fu_318_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_r_address0 <= zext_ln8_6_fu_275_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_address0 <= zext_ln8_2_fu_235_p1(18 - 1 downto 0);
        else 
            in_r_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    in_r_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, zext_ln8_4_fu_254_p1, zext_ln8_8_fu_293_p1, zext_ln8_11_fu_330_p1, zext_ln9_3_fu_388_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_r_address1 <= zext_ln9_3_fu_388_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_r_address1 <= zext_ln8_11_fu_330_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_r_address1 <= zext_ln8_8_fu_293_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_address1 <= zext_ln8_4_fu_254_p1(18 - 1 downto 0);
        else 
            in_r_address1 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_r_ce1 <= ap_const_logic_1;
        else 
            in_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_580_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(j_0_reg_146));
    or_ln8_1_fu_192_p2 <= (shl_ln8_fu_174_p3 or ap_const_lv18_1);
    or_ln8_fu_182_p2 <= (shl_ln8_fu_174_p3 or ap_const_lv18_1FF);
    or_ln9_fu_357_p3 <= (ap_const_lv1_1 & j_0_reg_146);
    out_r_address0 <= zext_ln12_fu_575_p1(18 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= add_ln12_reg_708;

    out_r_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln10_fu_527_p3 <= 
        sub_ln10_fu_521_p2 when (tmp_fu_502_p3(0) = '1') else 
        add_ln10_fu_516_p2;
    select_ln11_fu_553_p3 <= 
        sub_ln11_fu_547_p2 when (tmp_1_fu_535_p3(0) = '1') else 
        trunc_ln11_fu_543_p1;
        sext_ln8_1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln8_5_fu_279_p2),18));

        sext_ln8_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln8_fu_220_p2),18));

        sext_ln9_1_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln9_reg_671),10));

        sext_ln9_2_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln9_1_reg_703),11));

        sext_ln9_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln9_fu_357_p3),18));

    shl_ln8_1_fu_302_p3 <= (reg_163 & ap_const_lv1_0);
    shl_ln8_2_fu_419_p3 <= (reg_163 & ap_const_lv1_0);
    shl_ln8_3_fu_443_p2 <= std_logic_vector(shift_left(unsigned(reg_163),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln8_fu_174_p3 <= (i_0_reg_134 & ap_const_lv9_0);
    shl_ln9_1_fu_465_p3 <= (in_load_6_reg_693 & ap_const_lv1_0);
    shl_ln9_fu_476_p3 <= (in_load_7_reg_698 & ap_const_lv1_0);
    sub_ln10_fu_521_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(add_ln10_fu_516_p2));
    sub_ln11_fu_547_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln11_fu_543_p1));
    sub_ln8_fu_437_p2 <= std_logic_vector(unsigned(zext_ln8_12_fu_415_p1) - unsigned(zext_ln8_18_fu_434_p1));
    sub_ln9_1_fu_409_p2 <= std_logic_vector(unsigned(add_ln9_2_fu_403_p2) - unsigned(zext_ln8_16_fu_397_p1));
    sub_ln9_fu_351_p2 <= std_logic_vector(unsigned(zext_ln8_3_fu_298_p1) - unsigned(zext_ln8_7_fu_314_p1));
    tmp_1_fu_535_p3 <= gy_sum_fu_496_p2(10 downto 10);
    tmp_fu_502_p3 <= gx_sum_fu_459_p2(10 downto 10);
    trunc_ln11_fu_543_p1 <= gy_sum_fu_496_p2(8 - 1 downto 0);
    trunc_ln8_fu_449_p1 <= sub_ln8_fu_437_p2(8 - 1 downto 0);
    zext_ln12_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_1_fu_567_p3),64));
    zext_ln7_1_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_146),19));
    zext_ln7_2_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_146),11));
    zext_ln7_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_146),10));
    zext_ln8_10_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln8_7_reg_631),64));
    zext_ln8_11_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln8_8_fu_325_p2),64));
    zext_ln8_12_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_158),11));
    zext_ln8_13_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln8_2_fu_419_p3),11));
    zext_ln8_14_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln8_5_reg_646),18));
    zext_ln8_15_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_load_5_reg_676),11));
    zext_ln8_16_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_load_5_reg_676),10));
    zext_ln8_17_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln8_9_fu_335_p2),10));
    zext_ln8_18_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln8_10_reg_666),11));
    zext_ln8_1_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln8_1_fu_192_p2),19));
    zext_ln8_2_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln8_1_fu_230_p2),64));
    zext_ln8_3_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_158),9));
    zext_ln8_4_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln8_3_fu_246_p3),64));
    zext_ln8_5_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln8_1_fu_302_p3),10));
    zext_ln8_6_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln8_4_reg_626),64));
    zext_ln8_7_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_r_q0),9));
    zext_ln8_8_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln8_6_fu_288_p2),64));
    zext_ln8_9_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_158),10));
    zext_ln8_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln8_fu_182_p2),19));
    zext_ln9_1_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln9_1_fu_465_p3),11));
    zext_ln9_2_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln9_fu_357_p3),18));
    zext_ln9_3_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_1_fu_383_p2),64));
    zext_ln9_4_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln9_fu_476_p3),11));
    zext_ln9_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_fu_369_p2),64));
end behav;
