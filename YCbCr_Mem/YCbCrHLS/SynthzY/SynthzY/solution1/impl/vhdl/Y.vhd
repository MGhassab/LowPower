-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    R : IN STD_LOGIC_VECTOR (7 downto 0);
    G : IN STD_LOGIC_VECTOR (7 downto 0);
    B : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Y is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Y,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s100-fgga676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.567000,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=25,HLS_SYN_FF=2140,HLS_SYN_LUT=2962,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv64_4030000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_3FD072B020C49BA6 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010000011100101011000000100000110001001001101110100110";
    constant ap_const_lv64_3FB916872B020C4A : STD_LOGIC_VECTOR (63 downto 0) := "0011111110111001000101101000011100101011000000100000110001001010";
    constant ap_const_lv64_3FE020C49BA5E354 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000001000001100010010011011101001011110001101010100";
    constant ap_const_lv8_42 : STD_LOGIC_VECTOR (7 downto 0) := "01000010";
    constant ap_const_lv8_1A : STD_LOGIC_VECTOR (7 downto 0) := "00011010";
    constant ap_const_lv8_4C : STD_LOGIC_VECTOR (7 downto 0) := "01001100";
    constant ap_const_lv8_24 : STD_LOGIC_VECTOR (7 downto 0) := "00100100";
    constant ap_const_lv8_55 : STD_LOGIC_VECTOR (7 downto 0) := "01010101";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv8_3E : STD_LOGIC_VECTOR (7 downto 0) := "00111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_106 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal and_ln10_4_reg_341 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_89_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_111 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_84_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_117 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal and_ln10_4_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln15_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_103_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_356 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_2_fu_196_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_94_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_366 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_reg_371 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_V_1_fu_214_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_1_reg_377 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_84_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_84_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_89_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_100_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_103_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln10_1_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_2_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_4_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_5_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_2_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_3_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_3_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal mantissa_V_fu_218_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln502_fu_231_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_fu_234_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_248_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_240_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_253_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_257_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_1_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_fu_273_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_fu_227_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal zext_ln1287_fu_269_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal r_V_fu_277_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_10_fu_289_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_283_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal zext_ln662_fu_297_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_301_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_V_fu_311_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component Y_dadd_64ns_64ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Y_dmul_64ns_64ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Y_sitodp_32ns_64_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    Y_dadd_64ns_64ns_bkb_U1 : component Y_dadd_64ns_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_84_p0,
        din1 => grp_fu_84_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_84_p2);

    Y_dmul_64ns_64ns_cud_U2 : component Y_dmul_64ns_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_106,
        din1 => grp_fu_89_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_89_p2);

    Y_dmul_64ns_64ns_cud_U3 : component Y_dmul_64ns_64ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_reg_356,
        din1 => ap_const_lv64_3FE020C49BA5E354,
        ce => ap_const_logic_1,
        dout => grp_fu_94_p2);

    Y_sitodp_32ns_64_dEe_U4 : component Y_sitodp_32ns_64_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_100_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_100_p1);

    Y_sitodp_32ns_64_dEe_U5 : component Y_sitodp_32ns_64_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_103_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_103_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                and_ln10_4_reg_341 <= and_ln10_4_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln10_4_reg_341) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_0 = and_ln10_4_reg_341) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then
                reg_106 <= grp_fu_100_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln10_4_reg_341) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_0 = and_ln10_4_reg_341) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then
                reg_111 <= grp_fu_89_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln10_4_reg_341) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_lv1_0 = and_ln10_4_reg_341) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then
                reg_117 <= grp_fu_84_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln10_4_reg_341) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_4_reg_356 <= grp_fu_103_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln10_4_reg_341) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_5_reg_366 <= grp_fu_94_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln10_4_reg_341) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                tmp_V_1_reg_377 <= tmp_V_1_fu_214_p1;
                tmp_V_reg_371 <= p_Val2_s_fu_200_p1(62 downto 52);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln502_fu_234_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_fu_231_p1));
    and_ln10_1_fu_164_p2 <= (icmp_ln10_fu_122_p2 and and_ln10_fu_158_p2);
    and_ln10_2_fu_170_p2 <= (icmp_ln10_5_fu_152_p2 and icmp_ln10_4_fu_146_p2);
    and_ln10_3_fu_176_p2 <= (icmp_ln10_3_fu_140_p2 and and_ln10_2_fu_170_p2);
    and_ln10_4_fu_182_p2 <= (and_ln10_3_fu_176_p2 and and_ln10_1_fu_164_p2);
    and_ln10_fu_158_p2 <= (icmp_ln10_2_fu_134_p2 and icmp_ln10_1_fu_128_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv8_3E when (and_ln10_4_reg_341(0) = '1') else 
        val_V_fu_311_p3;

    grp_fu_100_p0_assign_proc : process(zext_ln15_fu_188_p1, ap_CS_fsm_state2, zext_ln15_2_fu_196_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_100_p0 <= zext_ln15_2_fu_196_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_100_p0 <= zext_ln15_fu_188_p1;
        else 
            grp_fu_100_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_103_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G),32));

    grp_fu_84_p0_assign_proc : process(reg_111, reg_117, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_84_p0 <= reg_117;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_84_p0 <= reg_111;
        else 
            grp_fu_84_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_84_p1_assign_proc : process(reg_111, tmp_5_reg_366, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_84_p1 <= ap_const_lv64_4030000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_84_p1 <= reg_111;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_84_p1 <= tmp_5_reg_366;
        else 
            grp_fu_84_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_89_p1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_89_p1 <= ap_const_lv64_3FB916872B020C4A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_89_p1 <= ap_const_lv64_3FD072B020C49BA6;
        else 
            grp_fu_89_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln10_1_fu_128_p2 <= "1" when (unsigned(R) > unsigned(ap_const_lv8_1A)) else "0";
    icmp_ln10_2_fu_134_p2 <= "1" when (unsigned(G) < unsigned(ap_const_lv8_4C)) else "0";
    icmp_ln10_3_fu_140_p2 <= "1" when (unsigned(G) > unsigned(ap_const_lv8_24)) else "0";
    icmp_ln10_4_fu_146_p2 <= "1" when (unsigned(B) < unsigned(ap_const_lv8_55)) else "0";
    icmp_ln10_5_fu_152_p2 <= "1" when (unsigned(B) > unsigned(ap_const_lv8_2D)) else "0";
    icmp_ln10_fu_122_p2 <= "1" when (unsigned(R) < unsigned(ap_const_lv8_42)) else "0";
    isNeg_fu_240_p3 <= add_ln502_fu_234_p2(11 downto 11);
    mantissa_V_fu_218_p4 <= ((ap_const_lv1_1 & tmp_V_1_reg_377) & ap_const_lv1_0);
    p_Val2_s_fu_200_p1 <= grp_fu_84_p2;
    r_V_1_fu_283_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_227_p1),to_integer(unsigned('0' & zext_ln1287_fu_269_p1(31-1 downto 0)))));
    r_V_fu_277_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_218_p4),to_integer(unsigned('0' & zext_ln1285_fu_273_p1(31-1 downto 0)))));
        sext_ln1311_1_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_257_p3),32));

        sext_ln1311_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_248_p2),12));

    sub_ln1311_fu_248_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_reg_371));
    tmp_10_fu_289_p3 <= r_V_fu_277_p2(53 downto 53);
    tmp_2_fu_301_p4 <= r_V_1_fu_283_p2(60 downto 53);
    tmp_V_1_fu_214_p1 <= p_Val2_s_fu_200_p1(52 - 1 downto 0);
    ush_fu_257_p3 <= 
        sext_ln1311_fu_253_p1 when (isNeg_fu_240_p3(0) = '1') else 
        add_ln502_fu_234_p2;
    val_V_fu_311_p3 <= 
        zext_ln662_fu_297_p1 when (isNeg_fu_240_p3(0) = '1') else 
        tmp_2_fu_301_p4;
    zext_ln1285_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_265_p1),54));
    zext_ln1287_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_265_p1),113));
    zext_ln15_2_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B),32));
    zext_ln15_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(R),32));
    zext_ln502_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_371),12));
    zext_ln662_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_289_p3),8));
    zext_ln682_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_218_p4),113));
end behav;
